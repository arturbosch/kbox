version = "0.8.1"

buildscript {
    ext {
        atrium_version = '0.6.0'
        kotlin_version = '1.2.41'
        mockito_kotlin_version = '1.5.0'
        dokka_version = '0.9.16'
        tutteli_plugins_version = '0.4.0'

        srcKotlin = 'src/main/kotlin'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_artifactId = 'kbox'
        publish_description = 'A utility library for Kotlin'
        publish_vcsUrl = 'https://github.com/robstoll/kbox.git'
    }

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "ch.tutteli:tutteli-gradle-project-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-spek:$tutteli_plugins_version"
    }
}

apply plugin: 'ch.tutteli.project.utils'

subprojects {
    it.version = rootProject.version

    repositories {
        jcenter()
    }
}

def commonProjects = prefixedProject('common')
def jvmProjects = prefixedProject('jvm')
def jsProjects = prefixedProject('js')

static def getCommonProject(String name, String suffix) {
    return ":${name.substring(0, name.indexOf(suffix))}-common"
}

configure(commonProjects) {
    apply plugin: 'kotlin-platform-common'
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    }
}

configure(jvmProjects) { Project subproject ->
    apply plugin: 'kotlin-platform-jvm'


    dependencies {
        expectedBy project(getCommonProject(subproject.name, '-jvm'))
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }
}

configure(jsProjects) { Project subproject ->
    apply plugin: 'kotlin-platform-js'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
        expectedBy project(getCommonProject(subproject.name, '-js'))
    }
}

def publishedProjects = subprojects
configure(publishedProjects) {
    it.ext.publish_components = []
    it.ext.publish_artifacts = []
}
configure(jvmProjects) {
    it.ext.publish_components = [components.java]
}
configure(publishedProjects - jvmProjects) {
    afterEvaluate {
        it.ext.publish_artifacts += [jar]
    }
}

configure(jvmProjects) { subproject ->
    apply plugin: 'ch.tutteli.spek'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        runtime "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        testCompile("ch.tutteli:atrium-cc-en_UK-robstoll:$atrium_version") {
            exclude group: 'org.jetbrains.kotlin'
            exclude group: 'ch.tutteli', module: 'kbox'
        }
        testCompile ("ch.tutteli:atrium-spec:$atrium_version"){
            exclude group: 'org.jetbrains.kotlin'
            exclude group: 'ch.tutteli', module: 'kbox'
        }
        testCompile ("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
            exclude group: 'org.jetbrains.kotlin'
        }
    }

    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/kdoc"
        linkMapping {
            dir = "$srcKotlin"
            url = "https://github.com/robstoll/${subproject.name}/tree/master/${subproject.name}/$srcKotlin"
            suffix = '#L'
        }

        sourceDirs = files()
    }

    task sourceJar(type: Jar) {
        from subproject.sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        classifier = 'javadoc'
    }

    afterEvaluate {
        it.ext.publish_artifacts = [sourceJar, javadocJar]
    }
}


// has to be after the above blocks which define `it.ext.publish_artifacts`
configure(publishedProjects) { subproject ->
    subproject.ext {
        def index = subproject.name.indexOf("-jvm")
        publish_artifactId = index < 0 ? subproject.name : subproject.name.substring(0, index)
    }
    afterEvaluate {
        apply from: "${rootProject.projectDir}/gradle/scripts/publish.gradle", to: subproject

        def includeBuildTime = task('includeBuildTime') {
            doLast {
                project.tasks.withType(Jar) { jarTask ->
                    jarTask.manifest {
                        attributes('Build-Time': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ'))
                    }
                }
            }
        }

        task publishBintray {
            dependsOn includeBuildTime
            dependsOn bintrayUpload
            bintrayUpload.mustRunAfter(includeBuildTime)
        }
    }
}


if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
    configure(jvmProjects) {
        def srcModule = "src/module"
        def moduleInfo = file("${project.projectDir}/$srcModule/module-info.java")
        if (moduleInfo.exists()) {

            sourceSets {
                module {
                    java {
                        srcDirs = [srcModule]
                        compileClasspath = main.compileClasspath
                        sourceCompatibility = '9'
                        targetCompatibility = '9'
                    }
                }
                main {
                    kotlin { srcDirs += [srcModule] }
                }
            }

            compileModuleJava.configure {
                dependsOn compileKotlin
                destinationDir = compileKotlin.destinationDir
                doFirst {
                    options.compilerArgs = ['--module-path', classpath.asPath,]
                    classpath = files()
                }
            }
            jar.dependsOn compileModuleJava
        }
    }
}

/*

Release & deploy a commit
--------------------------------
1. change version in build.gradle to X.Y.Z
2. update master:
    a) point to the tag
        1) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit (modified build.gradle, README.md)
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) gr clean publishBintray
    b) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. change version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
3. commit & push changes

*/

