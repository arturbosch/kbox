version = "0.10.0"
group = 'ch.tutteli.kbox'

buildscript {
    ext {
        atrium_version = '0.7.0'
        kotlin_version = '1.2.50'
        mockito_kotlin_version = '1.5.0'
    }

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "ch.tutteli:tutteli-gradle-dokka:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-kotlin-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-project-utils:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-publish:${gradle.ext.tutteli_plugins_version}"
        classpath "ch.tutteli:tutteli-gradle-spek:${gradle.ext.tutteli_plugins_version}"
    }
}

apply plugin: 'ch.tutteli.project.utils'
apply plugin: 'ch.tutteli.kotlin.utils'
kotlinutils.kotlinVersion = kotlin_version

subprojects {
    repositories { jcenter() }
    description = 'A utility library for Kotlin'
}


configureCommonProjects()
configureJsProjects()
configureJvmProjects()

def publishedProjects = subprojects

def jvmProjects = getJvmProjects()
configure(jvmProjects) { subproject ->
    apply plugin: 'ch.tutteli.spek'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        testCompile "ch.tutteli.atrium:atrium-cc-en_GB-robstoll:$atrium_version", excluding {
            kotlin()
            kbox()
        }
        testCompile "ch.tutteli.atrium:atrium-spec:$atrium_version", excluding {
            kotlin()
            kbox()
            exclude group: 'ch.tutteli.atrium'
        }
        testCompile "com.nhaarman:mockito-kotlin:$mockito_kotlin_version", excludeKotlin
    }

    apply plugin: 'ch.tutteli.dokka'
}


// has to be after the above blocks which define `it.ext.publish_artifacts`
configure(publishedProjects) { subproject ->
    apply plugin: 'ch.tutteli.publish'
}


if (JavaVersion.current() >= JavaVersion.VERSION_1_9) {
    configure(jvmProjects) {
        def srcModule = "src/module"
        def moduleInfo = file("${project.projectDir}/$srcModule/module-info.java")
        if (moduleInfo.exists()) {

            sourceSets {
                module {
                    java {
                        srcDirs = [srcModule]
                        compileClasspath = main.compileClasspath
                        sourceCompatibility = '9'
                        targetCompatibility = '9'
                    }
                }
                main {
                    kotlin { srcDirs += [srcModule] }
                }
            }

            compileModuleJava.configure {
                dependsOn compileKotlin
                destinationDir = compileKotlin.destinationDir
                doFirst {
                    options.compilerArgs = ['--module-path', classpath.asPath,]
                    classpath = files()
                }
            }
            jar.dependsOn compileModuleJava
        }
    }
}

/*

Release & deploy a commit
--------------------------------
1. change version in build.gradle to X.Y.Z
2. update master:
    a) point to the tag
        1) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage in README.md)
        2) search for `tree/master` and replace it with `tree/vX.Y.Z` (README.md)
    b) commit (modified build.gradle, README.md)
    c) git tag vX.Y.Z
    d) git push origin vX.Y.Z
4. deploy to bintray:
    a) gr clean publishToBintray
    b) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. change version in build.gradle to X.Y.Z-SNAPSHOT
2. point to master
   a) search for `tag=vX.Y.Z` and replace it with `branch=master`
   b) search for `tree/vX.Y.Z` and replace it with `tree/master`
3. commit & push changes

*/

